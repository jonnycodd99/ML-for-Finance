setwd(fileloc)
rm(fileloc)
## Load data
world_markets_data <- readRDS('data/WorldMarkts99_20.RDS')
## Extract BSESN data
bsesn <-world_markets_data$BSESN
## Get subset of data
bsesn_df <- bsesn['2014-04/2017-03']; m=length(bsesn_df$BSESN.Open);
bsesn_ophlc <- bsesn_df[,c("BSESN.Open","BSESN.High","BSESN.Low","BSESN.Close")]
## Calculate volatility (regular estimations)
######################
vClose <- TTR::volatility(bsesn_ophlc, n=m,calc="close",N=252)
vParkinson <- TTR::volatility(bsesn_ophlc, n= m,calc="parkinson",N=252)
vGK <- TTR::volatility(bsesn_ophlc, n= m,calc="garman",N=252)
rm(list=ls())
# Packages
library(xts)
library("TTR")
## Set working directory to current script's location.
fileloc <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(fileloc)
rm(fileloc)
## Load data
world_markets_data <- readRDS('data/WorldMarkts99_20.RDS')
## Extract BSESN data
bsesn <-world_markets_data$BSESN
## Get subset of data
bsesn_df <- bsesn['2014-04/2017-03']; m=length(bsesn_df$BSESN.Open);
bsesn_ophlc <- bsesn_df[,c("BSESN.Open","BSESN.High","BSESN.Low","BSESN.Close")]
## Calculate volatility (regular estimations)
######################
vClose <- TTR::volatility(bsesn_ophlc, n=m,calc="close",N=252)
View(bsesn_df)
install.packages("zoo")
install.packages("zoo")
library(zoo)
bsesn_ophlc <- na.locf(bsesn_ophlc)
## Get subset of data
bsesn_df <- bsesn['2014-04/2017-03']; m=length(bsesn_df$BSESN.Open);
bsesn_ophlc <- bsesn_df[,c("BSESN.Open","BSESN.High","BSESN.Low","BSESN.Close")]
rm(list=ls())
# Packages
library(xts)
library("TTR")
library(tidyverse)
## Set working directory to current script's location.
fileloc <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(fileloc)
rm(fileloc)
## Load data
world_markets_data <- readRDS('data/WorldMarkts99_20.RDS')
## Extract BSESN data
bsesn <-world_markets_data$BSESN
## Get subset of data
bsesn_df <- bsesn['2014-04/2017-03']; m=length(bsesn_df$BSESN.Open);
bsesn_ophlc <- bsesn_df[,c("BSESN.Open","BSESN.High","BSESN.Low","BSESN.Close")]
View(bsesn_ophlc)
bsesn_ophlc <- bsesn_ophlc %>%
tidyr::fill(BSEN.Open, .direction = "down")
bsesn_ophlc <- bsesn_ophlc %>%
tidyr::fill(BSESN.Open, .direction = "down")
View(bsesn_ophlc)
bsesn_ophlc$BSESN.Open <- zoo::na.locf(bsesn_ophlc$BSESN.Open, na.rm = FALSE)
# Fill in missing values with previous value
bsesn_ophlc$BSESN.Open <- zoo::na.locf(bsesn_ophlc$BSESN.Open, na.rm = FALSE)
bsesn_ophlc$BSESN.High <- zoo::na.locf(bsesn_ophlc$BSESN.High, na.rm = FALSE)
bsesn_ophlc$BSESN.Low <- zoo::na.locf(bsesn_ophlc$BSESN.Low, na.rm = FALSE)
bsesn_ophlc$BSESN.Close <- zoo::na.locf(bsesn_ophlc$BSESN.Close, na.rm = FALSE)
# Define the rolling window size
n <- 252
# Function to apply volatility calculation on rolling windows
roll_volatility <- function(data, calc_type) {
rollapply(data, width = n, by.column = FALSE, FUN = function(x) {
volatility(x, calc = calc_type, N = n)
}, fill = NA, align = "right")
}
# Apply rolling volatility calculation for each type
vClose <- roll_volatility(bsesn_ophlc, "close")
vParkinson <- roll_volatility(bsesn_ophlc, "parkinson")
vGK <- roll_volatility(bsesn_ophlc, "garman")
View(vClose)
# Function to apply volatility calculation on rolling windows
roll_volatility <- function(data, calc_type) {
rollapply(data, width = n, by.column = FALSE, FUN = function(x) {
volatility(x, calc = calc_type, N = n, n=m)
}, fill = NA, align = "right")
}
# Apply rolling volatility calculation for each type
vClose <- roll_volatility(bsesn_ophlc, "close")
rm(list=ls())
# Packages
library(xts)
library("TTR")
library(tidyverse)
## Set working directory to current script's location.
fileloc <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(fileloc)
rm(fileloc)
## Load data
world_markets_data <- readRDS('data/WorldMarkts99_20.RDS')
## Extract BSESN data
bsesn <-world_markets_data$BSESN
## Get subset of data
bsesn_df <- bsesn['2014-04/2017-03']; m=length(bsesn_df$BSESN.Open);
bsesn_ophlc <- bsesn_df[,c("BSESN.Open","BSESN.High","BSESN.Low","BSESN.Close")]
# Fill in missing values with previous value
bsesn_ophlc$BSESN.Open <- zoo::na.locf(bsesn_ophlc$BSESN.Open, na.rm = FALSE)
bsesn_ophlc$BSESN.High <- zoo::na.locf(bsesn_ophlc$BSESN.High, na.rm = FALSE)
bsesn_ophlc$BSESN.Low <- zoo::na.locf(bsesn_ophlc$BSESN.Low, na.rm = FALSE)
bsesn_ophlc$BSESN.Close <- zoo::na.locf(bsesn_ophlc$BSESN.Close, na.rm = FALSE)
View(bsesn_ophlc)
#####
# Example variables
m <- 252  # Rolling window size
N <- 252 # Scaling factor
# bsesn_ophlc is a data frame that contains your time series data, with a "Close" column for closing prices
# Ensure your data has a date index
bsesn_ophlc$Date <- as.Date(bsesn_ophlc$Date)
bsesn_ophlc <- zoo(bsesn_ophlc)
# Applying the rolling window with rollapply
vClose <- rollapply(bsesn_ophlc$Close, width = m, FUN = function(x) {
TTR::volatility(xts::xts(x, order.by = index(bsesn_ophlc)), calc = "close", N = N)
}, by.column = FALSE, align = "right", fill = NA)
#####
# Assume bsesn_ophlc is an xts object with a "Close" column
# Example rolling window size and scaling factor
m <- 20  # Rolling window size
N <- 252 # Scaling factor
# Apply rollapply to compute rolling volatility
vClose <- rollapply(
bsesn_ophlc$Close,
width = m,
FUN = function(x) {
TTR::volatility(xts(x, order.by = index(bsesn_ophlc)[seq_along(x)]), calc = "close", N = N)
},
by.column = FALSE,
align = "right",
fill = NA
)
# The result is an xts object with the rolling volatility
vClose <- xts(vClose, order.by = index(bsesn_ophlc)[-c(1:(m-1))])
View(vClose)
# Apply rollapply to compute rolling volatility
vClose <- rollapply(
# Apply rollapply to compute rolling volatility
vClose <- rollapply(
# Apply rollapply to compute rolling volatility
vClose <- rollapply(
bsesn_ophlc,
width = m,
FUN = function(x) {
TTR::volatility(xts(x, order.by = index(bsesn_ophlc)[seq_along(x)]), calc = "close", N = N)
},
by.column = FALSE,
align = "right",
fill = NA
)
# Apply rollapply to compute rolling volatility
vClose <- rollapply(
bsesn_ophlc <- bsesn_df[,c("BSESN.Open","BSESN.High","BSESN.Low","BSESN.Close")]
# Fill in missing values with previous value
bsesn_ophlc$BSESN.Open <- zoo::na.locf(bsesn_ophlc$BSESN.Open, na.rm = FALSE)
bsesn_ophlc$BSESN.High <- zoo::na.locf(bsesn_ophlc$BSESN.High, na.rm = FALSE)
bsesn_ophlc$BSESN.Low <- zoo::na.locf(bsesn_ophlc$BSESN.Low, na.rm = FALSE)
bsesn_ophlc$BSESN.Close <- zoo::na.locf(bsesn_ophlc$BSESN.Close, na.rm = FALSE)
# Apply rollapply to compute rolling volatility
vClose <- rollapply(
bsesn_ophlc,
width = 252,
FUN = function(x) {
TTR::volatility(x, n=m,calc="close", N=252)
},
by.column = FALSE,
)
# Apply rollapply to compute rolling volatility
vClose <- rollapply(
data = bsesn_ophlc,        # make sure data is in a correct format
width = 252,               # set the rolling window width
FUN = function(x) {
# Replace 'm' with a specific value or remove if not needed
TTR::volatility(x, n=252, calc="close", N=252)
},
by.column = FALSE,
fill = NA                  # set fill to NA to handle edge cases
)
## Calculate volatility (regular estimations)
######################
vClose <- TTR::volatility(bsesn_ophlc, n=m,calc="close",N=252)
rm(list=ls())
# Packages
library(xts)
library("TTR")
library(tidyverse)
## Set working directory to current script's location.
fileloc <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(fileloc)
rm(fileloc)
## Load data
world_markets_data <- readRDS('data/WorldMarkts99_20.RDS')
## Extract BSESN data
bsesn <-world_markets_data$BSESN
## Get subset of data
bsesn_df <- bsesn['2014-04/2017-03']; m=length(bsesn_df$BSESN.Open);
bsesn_ophlc <- bsesn_df[,c("BSESN.Open","BSESN.High","BSESN.Low","BSESN.Close")]
# Fill in missing values with previous value
bsesn_ophlc$BSESN.Open <- zoo::na.locf(bsesn_ophlc$BSESN.Open, na.rm = FALSE)
bsesn_ophlc$BSESN.High <- zoo::na.locf(bsesn_ophlc$BSESN.High, na.rm = FALSE)
bsesn_ophlc$BSESN.Low <- zoo::na.locf(bsesn_ophlc$BSESN.Low, na.rm = FALSE)
bsesn_ophlc$BSESN.Close <- zoo::na.locf(bsesn_ophlc$BSESN.Close, na.rm = FALSE)
## Calculate volatility (regular estimations)
######################
vClose <- TTR::volatility(bsesn_ophlc, n=m,calc="close",N=252)
vParkinson <- TTR::volatility(bsesn_ophlc, n= m,calc="parkinson",N=252)
vGK <- TTR::volatility(bsesn_ophlc, n= m,calc="garman",N=252)
View(vClose)
## Calculate volatility (regular estimations)
######################
vClose <- TTR::volatility(bsesn_ophlc, n=252,calc="close",N=252)
rm(list=ls())
# Packages
library(xts)
library("TTR")
library(tidyverse)
## Set working directory to current script's location.
fileloc <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(fileloc)
rm(fileloc)
## Load data
world_markets_data <- readRDS('data/WorldMarkts99_20.RDS')
## Extract BSESN data
bsesn <-world_markets_data$BSESN
## Get subset of data
bsesn_df <- bsesn['2014-04/2017-03']; m=length(bsesn_df$BSESN.Open);
bsesn_ophlc <- bsesn_df[,c("BSESN.Open","BSESN.High","BSESN.Low","BSESN.Close")]
# Fill in missing values with previous value
bsesn_ophlc$BSESN.Open <- zoo::na.locf(bsesn_ophlc$BSESN.Open, na.rm = FALSE)
bsesn_ophlc$BSESN.High <- zoo::na.locf(bsesn_ophlc$BSESN.High, na.rm = FALSE)
bsesn_ophlc$BSESN.Low <- zoo::na.locf(bsesn_ophlc$BSESN.Low, na.rm = FALSE)
bsesn_ophlc$BSESN.Close <- zoo::na.locf(bsesn_ophlc$BSESN.Close, na.rm = FALSE)
## Calculate volatility (regular estimations)
######################
vClose <- TTR::volatility(bsesn_ophlc, n=252,calc="close",N=252)
vParkinson <- TTR::volatility(bsesn_ophlc, n= 252,calc="parkinson",N=252)
vGK <- TTR::volatility(bsesn_ophlc, n= 252,calc="garman",N=252)
## Calculate EMA using TTR
######################
returns <-diff(bsesn_ophlc$BSESN.Close)
log_returns <- diff(log(bsesn_ophlc$BSESN.Close))
log_returns_squared <- log_returns^2
vEMA <- TTR::EMA(log_returns_squared, ratio=0.06, N=2352)
vEMA <- sqrt(vEMA) * sqrt(252)  # Convert to annualized volatility
vEMA[m] # 0.903
# Create a data frame of results
volatility_measures <- data.frame(
Close = vClose[m],
Parkinson = vParkinson[m],
Garman_Klass = vGK[m],
EMA = vEMA[m]
)
print(volatility_measures)
## Manual Calculation as sense check
######################
# Calculate log returns
log_returns <- log_returns[-1]
# Set the decay factor
lambda <- 0.94
# Initialize the array for EWMA volatility with the first element as the initial variance
ewma_vol <- numeric(length(log_returns))
ewma_vol[1] <- var(log_returns)  # Initial variance estimate
# Compute EWMA for volatility
for (i in 2:length(log_returns)) {
ewma_vol[i] <- lambda * ewma_vol[i - 1] + (1 - lambda) * (log_returns[i-1]^2)
}
# Convert variance to volatility and annualize it
ewma_vol <- sqrt(ewma_vol) * sqrt(252)  # Convert to annualized volatility
ewma_vol[m-1] # 0.093
vEMA[m] # 0.903
rm(list=ls())
# Packages
library(xts)
library("TTR")
library(tidyverse)
## Set working directory to current script's location.
fileloc <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(fileloc)
rm(fileloc)
## Load data
world_markets_data <- readRDS('data/WorldMarkts99_20.RDS')
## Extract BSESN data
bsesn <-world_markets_data$BSESN
## Get subset of data
bsesn_df <- bsesn['2015-04/2017-03']; m=length(bsesn_df$BSESN.Open);
bsesn_ophlc <- bsesn_df[,c("BSESN.Open","BSESN.High","BSESN.Low","BSESN.Close")]
# Fill in missing values with previous value
bsesn_ophlc$BSESN.Open <- zoo::na.locf(bsesn_ophlc$BSESN.Open, na.rm = FALSE)
bsesn_ophlc$BSESN.High <- zoo::na.locf(bsesn_ophlc$BSESN.High, na.rm = FALSE)
bsesn_ophlc$BSESN.Low <- zoo::na.locf(bsesn_ophlc$BSESN.Low, na.rm = FALSE)
bsesn_ophlc$BSESN.Close <- zoo::na.locf(bsesn_ophlc$BSESN.Close, na.rm = FALSE)
## Calculate volatility (regular estimations)
######################
vClose <- TTR::volatility(bsesn_ophlc, n=252,calc="close",N=252)
vParkinson <- TTR::volatility(bsesn_ophlc, n= 252,calc="parkinson",N=252)
vGK <- TTR::volatility(bsesn_ophlc, n= 252,calc="garman",N=252)
## Calculate EMA using TTR
######################
returns <-diff(bsesn_ophlc$BSESN.Close)
log_returns <- diff(log(bsesn_ophlc$BSESN.Close))
log_returns_squared <- log_returns^2
vEMA <- TTR::EMA(log_returns_squared, ratio=0.06, N=2352)
vEMA <- sqrt(vEMA) * sqrt(252)  # Convert to annualized volatility
vEMA[m] # 0.903
vEMA <- TTR::EMA(log_returns_squared, ratio=0.06, N=252)
vEMA <- sqrt(vEMA) * sqrt(252)  # Convert to annualized volatility
vEMA[m] # 0.903
rm(list=ls())
# Packages
library(xts)
library("TTR")
library(tidyverse)
## Set working directory to current script's location.
fileloc <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(fileloc)
rm(fileloc)
## Load data
world_markets_data <- readRDS('data/WorldMarkts99_20.RDS')
## Extract BSESN data
bsesn <-world_markets_data$BSESN
## Get subset of data
bsesn_df <- bsesn['2015-04/2017-03']; m=length(bsesn_df$BSESN.Open);
bsesn_ophlc <- bsesn_df[,c("BSESN.Open","BSESN.High","BSESN.Low","BSESN.Close")]
# Fill in missing values with previous value
bsesn_ophlc$BSESN.Open <- zoo::na.locf(bsesn_ophlc$BSESN.Open, na.rm = FALSE)
bsesn_ophlc$BSESN.High <- zoo::na.locf(bsesn_ophlc$BSESN.High, na.rm = FALSE)
bsesn_ophlc$BSESN.Low <- zoo::na.locf(bsesn_ophlc$BSESN.Low, na.rm = FALSE)
bsesn_ophlc$BSESN.Close <- zoo::na.locf(bsesn_ophlc$BSESN.Close, na.rm = FALSE)
## Calculate volatility (regular estimations)
######################
vClose <- TTR::volatility(bsesn_ophlc, n=252,calc="close",N=252)
vParkinson <- TTR::volatility(bsesn_ophlc, n= 252,calc="parkinson",N=252)
vGK <- TTR::volatility(bsesn_ophlc, n= 252,calc="garman",N=252)
View(vClose)
## Calculate EMA using TTR
######################
returns <-diff(bsesn_ophlc$BSESN.Close)
log_returns <- diff(log(bsesn_ophlc$BSESN.Close))
log_returns_squared <- log_returns^2
vEMA <- TTR::EMA(log_returns_squared, ratio=0.06, N=252)
vEMA <- sqrt(vEMA) * sqrt(252)  # Convert to annualized volatility
vEMA[m] # 0.903
View(vEMA)
vEMA[m] # 0.09
# Create a data frame of results
volatility_measures <- data.frame(
Close = vClose[m],
Parkinson = vParkinson[m],
Garman_Klass = vGK[m],
EMA = vEMA[m]
)
print(volatility_measures)
## Manual Calculation as sense check
######################
# Calculate log returns
log_returns <- log_returns[-1]
# Set the decay factor
lambda <- 0.94
# Initialize the array for EWMA volatility with the first element as the initial variance
ewma_vol <- numeric(length(log_returns))
ewma_vol[1] <- var(log_returns)  # Initial variance estimate
# Compute EWMA for volatility
for (i in 2:length(log_returns)) {
ewma_vol[i] <- lambda * ewma_vol[i - 1] + (1 - lambda) * (log_returns[i-1]^2)
}
# Convert variance to volatility and annualize it
ewma_vol <- sqrt(ewma_vol) * sqrt(252)  # Convert to annualized volatility
ewma_vol[m-1] # 0.093
print(volatility_measures)
# Plot
#######
library(ggplot2)
library(reshape2)
# Plot
#######
install.packages("reshape2")
install.packages("reshape2")
# Plot
#######
library(ggplot2)
library(reshape2)
# Combine the xts objects into a single xts object
combined_xts <- merge(vClose, vParkinson, vGK, vEMA)
# Convert the xts object to a data frame for ggplot
df_combined <- data.frame(Date = index(combined_xts), coredata(combined_xts))
# Packages
library(xts)
library("TTR")
library(tidyverse)
# Combine the xts objects into a single xts object
combined_xts <- merge(vClose, vParkinson, vGK, vEMA)
# Convert the xts object to a data frame for ggplot
df_combined <- data.frame(Date = index(combined_xts), coredata(combined_xts))
# Melt the data frame for ggplot2
df_melted <- melt(df_combined, id = "Date")
# Plot using ggplot2
ggplot(df_melted, aes(x = Date, y = value, color = variable)) +
geom_line() +
labs(title = "Line Plot of vClose, vParkinson, vGK, and vEMA",
x = "Date", y = "Value", color = "Variables") +
theme_minimal()
## Manual Calculation as sense check
######################
# Calculate log returns
log_returns <- log_returns[-1]
# Set the decay factor
lambda <- 0.94
# Initialize the array for EWMA volatility with the first element as the initial variance
ewma_vol <- numeric(length(log_returns))
ewma_vol[1] <- var(log_returns[1:252])  # Initial variance estimate
# Compute EWMA for volatility
for (i in 2:length(log_returns)) {
ewma_vol[i] <- lambda * ewma_vol[i - 1] + (1 - lambda) * (log_returns[i-1]^2)
}
# Convert variance to volatility and annualize it
ewma_vol <- sqrt(ewma_vol) * sqrt(252)  # Convert to annualized volatility
ewma_vol[m-1] # 0.09
rm(list=ls())
# Packages
library(xts)
library("TTR")
library(tidyverse)
## Set working directory to current script's location.
fileloc <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(fileloc)
rm(fileloc)
## Load data
world_markets_data <- readRDS('data/WorldMarkts99_20.RDS')
## Extract BSESN data
bsesn <-world_markets_data$BSESN
## Get subset of data
bsesn_df <- bsesn['2015-04/2017-03']; m=length(bsesn_df$BSESN.Open);
bsesn_ophlc <- bsesn_df[,c("BSESN.Open","BSESN.High","BSESN.Low","BSESN.Close")]
# Fill in missing values with previous value
bsesn_ophlc$BSESN.Open <- zoo::na.locf(bsesn_ophlc$BSESN.Open, na.rm = FALSE)
bsesn_ophlc$BSESN.High <- zoo::na.locf(bsesn_ophlc$BSESN.High, na.rm = FALSE)
bsesn_ophlc$BSESN.Low <- zoo::na.locf(bsesn_ophlc$BSESN.Low, na.rm = FALSE)
bsesn_ophlc$BSESN.Close <- zoo::na.locf(bsesn_ophlc$BSESN.Close, na.rm = FALSE)
## Calculate volatility (regular estimations)
######################
vClose <- TTR::volatility(bsesn_ophlc, n=252,calc="close",N=252)
vParkinson <- TTR::volatility(bsesn_ophlc, n= 252,calc="parkinson",N=252)
vGK <- TTR::volatility(bsesn_ophlc, n= 252,calc="garman",N=252)
## Calculate EMA using TTR
######################
returns <-diff(bsesn_ophlc$BSESN.Close)
log_returns <- diff(log(bsesn_ophlc$BSESN.Close))
log_returns_squared <- log_returns^2
vEMA <- TTR::EMA(log_returns_squared, ratio=0.06, N=252)
vEMA <- sqrt(vEMA) * sqrt(252)  # Convert to annualized volatility
vEMA[m] # 0.09
# Create a data frame of results
volatility_measures <- data.frame(
Close = vClose[m],
Parkinson = vParkinson[m],
Garman_Klass = vGK[m],
EMA = vEMA[m]
)
print(volatility_measures)
# Plot
#######
library(ggplot2)
library(reshape2)
# Combine the xts objects into a single xts object
combined_xts <- merge(vClose, vParkinson, vGK, vEMA)
# Convert the xts object to a data frame for ggplot
df_combined <- data.frame(Date = index(combined_xts), coredata(combined_xts))
# Melt the data frame for ggplot2
df_melted <- melt(df_combined, id = "Date")
# Plot using ggplot2
ggplot(df_melted, aes(x = Date, y = value, color = variable)) +
geom_line() +
labs(title = "Line Plot of vClose, vParkinson, vGK, and vEMA",
x = "Date", y = "Value", color = "Variables") +
theme_minimal()
## Manual Calculation as sense check
######################
# Calculate log returns
log_returns <- log_returns[-1]
View(log_returns)
# Set the decay factor
lambda <- 0.94
# Initialize the array for EWMA volatility with the first element as the initial variance
ewma_vol <- numeric(length(log_returns))
ewma_vol[1] <- var(log_returns[1:252])  # Initial variance estimate
# Compute EWMA for volatility
for (i in 2:length(log_returns)) {
ewma_vol[i] <- lambda * ewma_vol[i - 1] + (1 - lambda) * (log_returns[i-1]^2)
}
# Convert variance to volatility and annualize it
ewma_vol <- sqrt(ewma_vol) * sqrt(252)  # Convert to annualized volatility
ewma_vol[m-1] # 0.09
ewma_vol
View(df_melted)
combined_xts <- combined_xts['2016-04/2017-03']
# Convert the xts object to a data frame for ggplot
df_combined <- data.frame(Date = index(combined_xts), coredata(combined_xts))
# Melt the data frame for ggplot2
df_melted <- melt(df_combined, id = "Date")
# Plot using ggplot2
ggplot(df_melted, aes(x = Date, y = value, color = variable)) +
geom_line() +
labs(title = "Line Plot of vClose, vParkinson, vGK, and vEMA",
x = "Date", y = "Value", color = "Variables") +
theme_minimal()
