##################################
# Homework 1 - Question 1
##################################
rm(list=ls())
# Packages
library(xts)
library("TTR")
## Set working directory to current script's location.
fileloc <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(fileloc)
rm(fileloc)
## Load data
world_markets_data <- readRDS('data/WorldMarkts99_20.RDS')
## Extract BSESN data
bsesn <-world_markets_data$BSESN
## Get subset of data
bsesn_df <- bsesn['2016-04/2017-03']; m=length(bsesn_df$BSESN.Open);
bsesn_ophlc <- bsesn_df[,c("BSESN.Open","BSESN.High","BSESN.Low","BSESN.Close")]
## Calculate volatility (regular estimations)
######################
vClose <- TTR::volatility(bsesn_ophlc, n=m,calc="close",N=252)
vParkinson <- TTR::volatility(bsesn_ophlc, n= m,calc="parkinson",N=252)
vGK <- TTR::volatility(bsesn_ophlc, n= m,calc="garman",N=252)
## Calculate EMA using TTR
######################
log_returns <- diff(log(bsesn_ophlc$BSESN.Close))
log_returns_squared <- log_returns^2
vEMA <- TTR::EMA(log_returns_squared, ratio=0.06, N=252)
vEMA <- sqrt(vEMA) * sqrt(252)  # Convert to annualized volatility
vEMA[m] # 0.903
# Create a data frame of results
volatility_measures <- data.frame(
Close = vClose[m],
Parkinson = vParkinson[m],
Garman_Klass = vGK[m],
EMA = vEMA[m]
)
print(volatility_measures)
## Manual Calculation as sense check
######################
# Calculate log returns
log_returns <- log_returns[-1]
# Set the decay factor
lambda <- 0.94
# Initialize the array for EWMA volatility with the first element as the initial variance
ewma_vol <- numeric(length(log_returns))
ewma_vol[1] <- var(log_returns)  # Initial variance estimate
# Compute EWMA for volatility
for (i in 2:length(log_returns)) {
ewma_vol[i] <- lambda * ewma_vol[i - 1] + (1 - lambda) * (log_returns[i-1]^2)
}
# Convert variance to volatility and annualize it
ewma_vol <- sqrt(ewma_vol) * sqrt(252)  # Convert to annualized volatility
ewma_vol[m-1] # 0.093
## Load packages
library(rsocialwatcher)
library(dplyr)
library(tidyr)
library(ggplot2)
library(WDI)
library(janitor)
library(leaflet)
library(ggpubr)
library(knitr)
library(kableExtra)
library(sf)
library(spData)
TOKEN      <- "EAAQVxCcG6XUBOyX11ZCfZCaS8V6vmLLfx1vKOZAJMHGtDm7DZA7pKxR6PlApJjJqwHVblAmnCZCoUjihSWtL2PqB0sAcoUNqGJWLDKIsUQNR4GufZBSBzAg09ZC8YgvrZAaFdl50cmeUFYscTNFs0DI47AiAMMdPAltHrvgOpSozSqfYzPKAndeFnh9jsSZBIHmEsBvZBZC0ROM"
VERSION <- "v19.0"
CREATION_ACT <- "1402685780386779"
us_states_df <- get_fb_parameter_ids(type    = "region",
version = VERSION,
token   = TOKEN,
country_code = "US")
ny_key <- us_states_df %>% filter(name == "Connecticut") %>% pull(key)
ny_cities_df <- get_fb_parameter_ids(type    = "city",
version = VERSION,
token   = TOKEN,
region_id = ny_key,
q = "Connecticut")
us_states_df <- get_fb_parameter_ids(type    = "region",
version = VERSION,
token   = TOKEN,
country_code = "US")
ct_key <- us_states_df %>% filter(name == "Connecticut") %>% pull(key)
ct_cities_df <- get_fb_parameter_ids(type    = "city",
version = VERSION,
token   = TOKEN,
region_id = ny_key,
q = "Connecticut")
ct_cities_coords_df <- get_fb_parameter_ids(type    = "city",
version = VERSION,
token   = TOKEN,
region_id = ct_key,
q = "Connecticut",
add_location_coords = T)
ct_key
ct_cities_coords_df <- get_fb_parameter_ids(type    = "city",
version = VERSION,
token   = TOKEN,
region_id = ct_key,
add_location_coords = T)
ct_cities_coords_df <- get_fb_parameter_ids(type    = "city",
version = VERSION,
token   = TOKEN,
region_id = ct_key,
q = "Connecticut",
add_location_coords = T)
ct_cities_df
us_states_df <- get_fb_parameter_ids(type    = "region",
version = VERSION,
token   = TOKEN,
country_code = "US")
ct_key <- us_states_df %>% filter(name == "Connecticut") %>% pull(key)
ct_cities_df <- get_fb_parameter_ids(type    = "city",
version = VERSION,
token   = TOKEN,
region_id = ny_key,
q = "Connecticut",
add_location_coords = T)
us_states_df <- get_fb_parameter_ids(type    = "region",
version = VERSION,
token   = TOKEN,
country_code = "US")
ct_key <- us_states_df %>% filter(name == "Connecticut") %>% pull(key)
ct_cities_df <- get_fb_parameter_ids(type    = "city",
version = VERSION,
token   = TOKEN,
region_id = ny_key,
q = "Connecticut")
us_states_df <- get_fb_parameter_ids(type    = "region",
version = VERSION,
token   = TOKEN,
country_code = "US")
ct_key <- us_states_df %>% filter(name == "Connecticut") %>% pull(key)
ct_cities_df <- get_fb_parameter_ids(type    = "city",
version = VERSION,
token   = TOKEN,
region_id = ct_key,
q = "Connecticut")
ct_key
ct_cities_coords_df <- get_fb_parameter_ids(type    = "city",
version = VERSION,
token   = TOKEN,
region_id = ct_key,
q = "Connecticut",
add_location_coords = T)
library(stringr)
## Load keys
# api_keys <- read.csv("~/Dropbox/World Bank/Webscraping/Files for Server/api_keys.csv",
#                      stringsAsFactors = F)
api_keys <- read.csv("https://www.dropbox.com/scl/fi/5ug1cfhmoi6v2m393broz/fb_credentials.csv?rlkey=xedl2727l7mnf7ayg0zgrxtr0&dl=1")
api_keys <- api_keys %>%
dplyr::filter(Service == "facebook_marketing_ad",
Details == "robmarty3@gmail.com")
TOKEN1 <- api_keys %>%
dplyr::filter(Account == "token") %>%
pull(Key)
CREATION_ACT1 <- api_keys %>%
dplyr::filter(Account == "creation_act") %>%
pull(Key) %>%
str_replace_all("ACT_", "")
VERSION1 <- api_keys %>%
dplyr::filter(Account == "version") %>%
pull(Key)
ct_cities_coords_df <- get_fb_parameter_ids(type    = "city",
version = VERSION,
token   = TOKEN,
region_id = ct_key,
q = "Connecticut",
add_location_coords = T)
us_states_df <- get_fb_parameter_ids(type    = "region",
version = VERSION,
token   = TOKEN,
country_code = "US")
ny_key <- us_states_df %>% filter(name == "New York") %>% pull(key)
ct_cities_coords_df <- get_fb_parameter_ids(type    = "city",
version = VERSION,
token   = TOKEN,
region_id = ny_key,
q = "New York",
add_location_coords = T)
